name: Build ImmortalWrt for MX4200v1 with NSS

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 */6 * * *"

env:
  REMOTE_REPOSITORY: immortalwrt/immortalwrt
  REMOTE_BRANCH: v24.10.2
  CONFIG_FILE: mx4200v1.config
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: immortalwrt-nss
  NSS_PACKAGES_REPOSITORY: qosmio/nss-packages
  NSS_PACKAGES_REPOSITORY_BRANCH: NSS-12.5-K6.x

jobs:
  check_commits:
    runs-on: ubuntu-24.04
    outputs:
      new_commits: ${{ steps.check_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_commits.outputs.latest_commit_sha }}
      nss_packages_repo_new_commits: ${{ steps.check_commits.outputs.nss_packages_repo_new_commits }}
      nss_packages_repo_latest_commit_sha: ${{ steps.check_commits.outputs.nss_packages_repo_latest_commit_sha }}
    steps:
      - name: Check latest commits
        id: check_commits
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_sha=$(gh api "repos/${{ env.REMOTE_REPOSITORY }}/commits/${{ env.REMOTE_BRANCH }}" --jq .sha)
          packages_sha=$(gh api "repos/${{ env.NSS_PACKAGES_REPOSITORY }}/commits/${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }}" --jq .sha)
          release_body=$(gh api "repos/${{ github.repository }}/releases/latest" --jq .body || echo "")

          {
            echo "latest_commit_sha=$latest_sha"
            echo "nss_packages_repo_latest_commit_sha=$packages_sha"
            echo "new_commits=true"
            echo "nss_packages_repo_new_commits=true"
            if [ -n "$release_body" ]; then
              echo "new_commits=$(if [[ "$release_body" != *"$latest_sha"* ]]; then echo true; else echo false; fi)"
              echo "nss_packages_repo_new_commits=$(if [[ "$release_body" != *"$packages_sha"* ]]; then echo true; else echo false; fi)"
            fi
          } >> "$GITHUB_OUTPUT"

  build:
    needs: check_commits
    if: github.event_name == 'workflow_dispatch' || needs.check_commits.outputs.new_commits == 'true' || needs.check_commits.outputs.nss_packages_repo_new_commits == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-pip python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo apt full-upgrade -y

      - name: Checkout ImmortalWrt source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}

      - name: Checkout current repo (configs/patches)
        uses: actions/checkout@v4
        with:
          path: "builder_repo"

      - name: Apply patches
        run: |
          if [ -d builder_repo/patches ] && [ "$(ls -A builder_repo/patches)" ]; then
            mv builder_repo/patches/* ./ || true
            for patch in *.patch; do
              git apply --verbose "$patch"
            done
          fi

      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure build
        run: |
          cp builder_repo/${{ env.CONFIG_FILE }} .config
          make defconfig -j$(nproc)

      - name: Add custom files
        run: |
          mkdir -p ${{ env.CUSTOM_FILES_PATH }}
          cp -r builder_repo/${{ env.CUSTOM_FILES_PATH }}* ${{ env.CUSTOM_FILES_PATH }} || true

      - name: Download sources
        run: make download -j$(nproc) V=s

      - name: Compile firmware
        run: make world -j$(nproc) V=s

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mx4200v1-images
          path: bin/targets/qualcommax/ipq807x

  release:
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: mx4200v1-images
          path: firmware

      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@master
        with:
          files: firmware/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: ðŸš€ ImmortalWrt Build ${{ env.RELEASE_DATE }}
          body: |
            ## ImmortalWrt MX4200v1 NSS Build
            **Build Date:** ${{ env.RELEASE_DATE }}

            **ImmortalWrt:** [${{ env.REMOTE_REPOSITORY }}](https://github.com/${{ env.REMOTE_REPOSITORY }})  
            **Branch:** `${{ env.REMOTE_BRANCH }}`  
            **Commit:** `${{ needs.check_commits.outputs.latest_commit_sha }}`  

            **NSS Packages:** [${{ env.NSS_PACKAGES_REPOSITORY }}](https://github.com/${{ env.NSS_PACKAGES_REPOSITORY }})  
            **Branch:** `${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }}`  
            **Commit:** `${{ needs.check_commits.outputs.nss_packages_repo_latest_commit_sha }}`  

            _Automated build via GitHub Actions._

      - name: Clean old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
